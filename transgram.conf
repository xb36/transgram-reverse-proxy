# required modules:
# mod_ssl (basic SSL/TLS)
# mod_proxy (provides basic proxy capabilities)
# mod_proxy_http (HTTP/0.9, HTTP/1.0, and HTTP/1.1)
# mod_proxy_wstunnel (for websocket connections)

<VirtualHost <YOUR_DOMAIN>:80>
 ServerName <YOUR_DOMAIN>
 RewriteEngine On
 RewriteCond %{HTTPS} off
 RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
</VirtualHost>

<VirtualHost <YOUR_DOMAIN>:443>
 
 LogLevel debug

 ServerName <YOUR_DOMAIN>
 ServerAdmin <WEBMASTER_EMAIL>

 ## SSL ...
 SSLEngine on
 SSLCertificateFile /etc/letsencrypt/live/<YOUR_DOMAIN>/fullchain.pem
 SSLCertificateKeyFile /etc/letsencrypt/live/<YOUR_DOMAIN>/privkey.pem
 Include /etc/letsencrypt/options-ssl-apache.conf

 ## logging
 ErrorLog ${APACHE_LOG_DIR}/transgram/error.log
 CustomLog ${APACHE_LOG_DIR}/transgram/access.log combined

 # Don't act as a forward proxy
 ProxyRequests Off

 # forward requests to proxy =>
 ProxyPreserveHost On

 <Location "/">
  # RequestHeader set Upgrade $http_upgrade
  # RequestHeader set Connection "upgrade"

  SetEnvIf Origin ".+" TmpOrig=$0
  RequestHeader set Origin %{TmpOrig}e env=TmpOrig

  SetEnvIf Access-Control-Request-Headers ".+" TmpReqHead=$0
  RequestHeader set Access-Control-Request-Headers %{TmpReqHead}e env={TmpReqHead}

  SetEnvIf Access-Control-Request-Method ".+" TmpReqMeth=$0
  RequestHeader set Access-Control-Request-Method %{TmpReqMeth}e env={TmpReqMeth}

  ProxyPass "http://localhost:3333/"
  ProxyPassReverse "http://localhost:3333/"

 </Location>

 #ProxyRequest Off # not necessary to turn ProxyRequests on in order to configure a reverse proxy.
 
 # forward socket.io requests =>
 RewriteEngine on
 RewriteCond %{HTTP:Upgrade} websocket [NC]
 RewriteCond %{HTTP:Connection} upgrade [NC]
 # for socket.io =>
 RewriteRule /socket.io/(.*) ws://localhost:3333/socket.io/$1 [P,L]

 ## Required headers for CORS
 # crucial CORS-related header that indicates the origin of requesting domain
 # RequestHeader set Origin %{ORIGIN}e

 # used in CORS preflight requests to indicate the HTTP method
 RequestHeader set Access-Control-Request-Method "%{REQUEST_METHOD}e"

 # used in CORS preflight requests to indicate the requested headers
 RequestHeader set Access-Control-Request-Headers "%{HTTP_ACCESS_CONTROL_REQUEST_HEADERS}e"
</VirtualHost>
